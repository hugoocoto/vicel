func rule110(l, c, r) {
    if (l == 1 && c == 1 && r == 1) return 0;
    if (l == 1 && c == 1 && r == 0) return 1;
    if (l == 1 && c == 0 && r == 1) return 1;
    if (l == 1 && c == 0 && r == 0) return 0;
    if (l == 0 && c == 1 && r == 1) return 1;
    if (l == 0 && c == 1 && r == 0) return 1;
    if (l == 0 && c == 0 && r == 1) return 1;
    if (l == 0 && c == 0 && r == 0) return 0;
    return 0; // fallback
}

func print_gen(gen) {
    var i = 0;
    while (i < length(gen)) {
        if (get(gen, i) == 1) print("#");
        else print(" ");
        i = i + 1;
    }
    // print("\n"); both are the same
    println("");
}

func main() {
    var width = 80;
    var steps = 40;

    var gen = list();
    var i = 0;
    while (i < width) {
        if (i == width / 2) append(gen, 1);
        else append(gen, 0);
        i = i + 1;
    }

    var s = 0;
    while (s < steps) {
        print_gen(gen);

        var next = list();
        var j = 0;
        while (j < width) {
            var l = 0;
            var c = get(gen, j);
            var r = 0;

            if (j > 0) l = get(gen, j - 1);
            if (j < width - 1) r = get(gen, j + 1);

            append(next, rule110(l, c, r));
            j = j + 1;
        }

        gen = next;
        s = s + 1;
    }
}

main();

